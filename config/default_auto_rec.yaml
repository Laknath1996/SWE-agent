# Formerly called: anthropic_filemap.yaml
# This template is heavily inspired by anthropic's computer use demo, but you can use
# it with any LM.
agent:
  templates:
    system_template: |-
      You are a helpful assistant that can interact with a computer to solve tasks.  
    instance_template: |-
      <uploaded_files>
      {{working_dir}}
      </uploaded_files>
      I've uploaded a python code repository in the directory {{working_dir}}. Consider the following PR description:

      <pr_description>
      {{problem_statement}}
      </pr_description>

      Can you help me implement the necessary changes to the repository so that the requirements specified in the <pr_description> are met?
      I've already taken care of all changes to any of the test files described in the <pr_description>. This means you DON'T have to modify the testing logic or any of the tests in any way!
      Your task is to make the minimal changes to non-tests files in the {{working_dir}} directory to ensure the <pr_description> is satisfied.
      Follow these steps to resolve the issue:
      1. As a first step, it might be a good idea to find and read code relevant to the <pr_description>
      2. Create a script to reproduce the error and execute it with `python <filename.py>` using the bash tool, to confirm the error
      3. Edit the sourcecode of the repo to resolve the issue
      4. Rerun your reproduce script and confirm that the error is fixed!
      5. Think about edgecases and make sure your fix handles them as well
      Your thinking should be thorough and so it's fine if it's very long.
    auto_recompose_instructions: |-
      Based on the task you are given, you must draft a plan to solve it. The plan should look like this:
      
      1. Goal 1: <description of goal 1>
      2. Goal 2: <description of goal 2>
      3. Goal 3: <description of goal 3>
      ...

      Your response should include this list at every step. Indicate which goals you have completed.
      You can do so as follows:

      1. Goal 1: <description of goal 1> - Done
      2. Goal 2: <description of goal 2> - Done
      3. Goal 3: <description of goal 3>
      ...

      After each goal is completed, you must call the `recompose` tool.
      When all the goals are completed, you can provide the final solution.
    next_step_template: |-
      OBSERVATION:
      {{observation}}
    next_step_no_output_template: |-
      Your command ran successfully and did not produce any output.
    recompose_template: |-
      You are given a partial trace that outlines the steps taken so far toward solving a task.
      Your task is to output a short summary of your own progress up to this point.
      Write in the first person, as if you are explaining what you have done so far.
      Focus on the key steps you've taken, the discoveries you have made, and any intermediate insights.
      You may choose to retain useful code snippets or intermediate results that can be helpful for the next steps.
      Preserve the details of the plan you were going to follow. 
      When summarizing, consider all the thoughts, tool-calls, and tool-responses included in the trace.
      Include any important lessons you learned from the error messages within tool-responses, if any.
      Do not guess the final solution or go beyond the information you've already found.
      Clearly indicate the goals you have already completed.
      Write down the goals you plan to achieve as you continue to solve the task.
      After you summarize your progress so far, you will lose access to the trace and will have to continue solving the task based on the summary you output.
      Therefore, make sure to include all the relevant information in your summary and discard any unnecessary details.

      Here is the task you are asked to solve:
      {{problem_statement}}

      Here are steps you have taken so far:
      {{trace}}

      Now summarize your progress!
    summary_template: |-
      You have been working on this task, and you have made progress.
      Here is a summary of your progress so far:
      
      {{summary}}
      
      Based on this summary, you should now either proceed with solving the task or provide the final solution.
      Do not repeat the steps you have already completed. 
      Focus on the next steps you plan to take.
      If you have resolved the issue, provide the final solution.
  tools:
    env_variables:
      PAGER: cat
      MANPAGER: cat
      LESS: -R
      PIP_PROGRESS_BAR: 'off'
      TQDM_DISABLE: '1'
      GIT_PAGER: cat
    bundles:
      - path: tools/registry
      - path: tools/edit_anthropic
      - path: tools/review_on_submit_m
      - path: tools/recompose
    registry_variables:
      USE_FILEMAP: 'true'
      SUBMIT_REVIEW_MESSAGES:
        - |
          Thank you for your work on this issue. Please carefully follow the steps below to help review your changes.

          1. If you made any changes to your code after running the reproduction script, please run the reproduction script again.
            If the reproduction script is failing, please revisit your changes and make sure they are correct.
            If you have already removed your reproduction script, please ignore this step.
          2. Remove your reproduction script (if you haven't done so already).
          3. If you have modified any TEST files, please revert them to the state they had before you started fixing the issue.
            You can do this with `git checkout -- /path/to/test/file.py`. Use below <diff> to find the files you need to revert.
          4. Run the submit command again to confirm.

          Here is a list of all of your changes:

          <diff>
          {{diff}}
          </diff>
    enable_bash_tool: true
    parse_function:
      type: function_calling
  history_processors:
    - type: cache_control
      last_n_messages: 2
  model:
    per_instance_cost_limit: 2
    per_instance_call_limit: 150
    total_cost_limit: 1000.0
    temperature: 0.0
    delay: 0.0
